description = '''\
Run as:
gradle clean tomcatrunwar
'''

buildscript {
//The repositories block indicates that the build should resolve its dependencies from the Maven Central or jcenter repository
  repositories {
  	 jcenter()
  }

  dependencies {
     classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.0',
               'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0',
               'org.zeroturnaround:gradle-jrebel-plugin:1.1.2',
               'org.springframework.boot:spring-boot-gradle-plugin:1.1.6.RELEASE' // also change springDataJpaVersion below
  }
}

apply plugin: 'rebel'
apply plugin: 'license'
apply plugin: 'war'
apply plugin: 'spring-boot'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'tomcat'
apply plugin: 'project-report'
apply plugin: 'java'

/* define the valid syntax level for source files */
sourceCompatibility = JavaVersion.VERSION_1_7
/* define binary compatibility version */
targetCompatibility = JavaVersion.VERSION_1_7


project.ext.springBootVersion = '1.1.6.RELEASE'
project.ext.springVersion = '4.0.7.RELEASE'
project.ext.springOauthVersion = '2.0.4.RELEASE'
project.ext.jerseyVersion = '1.17'
project.ext.springDataJpaVersion = '1.7.0.RELEASE' // also change spring-boot-gradle-plugin version above


project.ext.mysqlUser='root'
project.ext.mysqlPassword='mysql'

group = 'org.obsplatform'

repositories {
	jcenter()
	maven {
	
	//url "http://nexus.pentaho.org/content/repositories/pentaho-public-release-repos/"
	//url "http://repository.pentaho.org/artifactory/repo/"
	url "http://nexus-private.hortonworks.com:8081/nexus/content/repositories/pentaho/"

    }
}

configurations {
    providedRuntime // needed for Spring Boot executable WAR
    providedCompile
	compile
	runtime
	all*.exclude group: 'commons-logging'
}

dependencies {
        def tomcatVersion = '7.0.54'
        tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
               "org.apache.tomcat.embed:tomcat-embed-logging-log4j:${tomcatVersion}" // NOT tomcat-embed-logging-juli (http://stackoverflow.com/questions/23963049/classcircularityerror-java-util-logging-logrecord-running-gradle-webapp-with-ja)
        tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
            exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
        }
        tomcat "org.apache.tomcat:tomcat-dbcp:${tomcatVersion}"

   providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")

    providedCompile(
      //        [group: 'javax.servlet', name: 'servlet-api', version: '2.5'],
            )
			
    compile files('src/main/resources/addexternalbeesmart.jar')			

	compile(
	         
	            [group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion],
                [group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: springBootVersion],
                [group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: springBootVersion],
                
               
            		        
	   			[group: 'org.springframework', name: 'spring-context-support', version: springVersion],
	   			[group: 'org.springframework', name: 'spring-jms', version: '4.3.0.RELEASE'],
	   			[group: 'org.apache.activemq', name: 'activemq-spring', version: '5.13.3'],
	   			[group: 'org.apache.activemq', name: 'activemq-kahadb-store', version: '5.13.3'],
	   			
	   			[group: 'org.apache.activemq', name: 'activemq-broker', version: '5.13.3'],
	   			
				[group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: springOauthVersion],
	   			
	   			[group: 'org.springframework.data', name: 'spring-data-jpa', version: springDataJpaVersion],
	   			
	            [group: 'javax.ws.rs', name: 'jsr311-api', version: '1.1.1'],
	            [group: 'com.sun.jersey', name: 'jersey-core', version: jerseyVersion],
	            [group: 'com.sun.jersey', name: 'jersey-servlet', version: jerseyVersion],
	            [group: 'com.sun.jersey', name: 'jersey-server', version: jerseyVersion],
	            [group: 'com.sun.jersey', name: 'jersey-json', version: jerseyVersion],
	            [group: 'com.sun.jersey.contribs', name: 'jersey-spring', version: jerseyVersion],
	            [group: 'com.sun.jersey.contribs', name: 'jersey-multipart', version: jerseyVersion],

	            [group: 'com.google.code.gson', name: 'gson', version: '2.2.2'],
	            [group: 'com.google.guava', name: 'guava', version: '14.0-rc2'],

                [group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'],
                [group: 'org.apache.commons', name: 'commons-email', version: '1.3.3'],
                [group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.2'],
	            [group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.0.1'],
	            
	         
	            [group: 'joda-time', name: 'joda-time', version: '2.4'],
                [group: 'net.sourceforge.javacsv', name: 'javacsv', version: '2.0'],
                

	            [group: 'mysql', name: 'mysql-connector-java', version: '5.1.27'],
                [group: 'org.apache.tomcat', name: 'tomcat-jdbc', version: tomcatVersion],

                [group: 'pentaho-reporting-engine', name: 'pentaho-reporting-engine-classic-core', version: '6.1.0.3-223'],
                [group: 'pentaho-reporting-engine', name: 'pentaho-reporting-engine-classic-extensions', version: '6.1.0.3-223'],
                [group: 'pentaho-reporting-engine', name: 'pentaho-reporting-engine-classic-extensions-scripting', version: '6.0.0.0-353'],
                [group: 'pentaho-reporting-engine', name: 'pentaho-reporting-engine-wizard-core', version: '6.1.0.3-223'],
                [group: 'pentaho-report-designer', name: 'pentaho-reporting-engine-wizard-xul', version: '6.1.0.3-223'],

                [group: 'pentaho-library', name: 'libbase', version: '6.1.0.3-223'],
                [group: 'pentaho-library',name: 'libdocbundle', version: '6.1.0.3-223'],
                [group: 'pentaho-library',name: 'libfonts', version: '6.1.0.3-223'],
                [group: 'pentaho-library',name: 'libformat', version: '6.1.0.3-223'],
                [group: 'pentaho-library',name: 'libformula', version: '6.1.0.3-223'],
                [group: 'pentaho-library',name: 'libloader', version: '6.1.0.3-223'],
                [group: 'pentaho-library',name: 'librepository', version: '6.1.0.3-223'],
                [group: 'pentaho-library',name: 'libserializer', version: '6.1.0.3-223'],
                [group: 'pentaho-library',name: 'libsparkline', version: '6.1.0.3-223'],
                [group: 'pentaho-library',name: 'libxml', version: '6.1.0.3-223'],
                
                [group: 'net.sf.jasperreports',name: 'jasperreports', version: '4.1.2'],
                [group: 'net.sf.jasperreports',name: 'jasperreports-fonts', version:'5.6.1'],
                
	            [group: 'commons-lang', name: 'commons-lang', version: '2.4'],
				[group: 'commons-digester',name:'commons-digester', version: '1.6'],				
				[group: 'commons-beanutils',name:'commons-beanutils', version: '1.5.3'],
                [group: 'commons-collections',name:'commons-collections', version: '3.2.1'],
                				
 	        	[group: 'org.apache.poi',name: 'poi', version: '3.9'],
 	        	[group: 'org.apache.poi',name: 'poi-ooxml', version: '3.9'],
 	        	[group: 'org.apache.poi',name: 'poi-ooxml-schemas', version: '3.9'],
 	        	
                [group: 'net.sf.ehcache', name: 'ehcache', version: '2.7.2'],
				[group: 'org.mnode.ical4j', name: 'ical4j', version: '1.0.4'],
                [group: 'org.quartz-scheduler', name: 'quartz', version: '2.1.7'],
                [group: 'net.sf.json-lib', name: 'json-lib', version: '2.4', classifier: 'jdk15'],
                [group: 'org.json', name: 'json', version: '20090211'],
                
                [group: 'com.paypal.sdk', name: 'paypal-core', version: '1.4.3'],
                [group: 'com.paypal.sdk', name: 'rest-api-sdk', version: '0.9.0'],
                [group: 'com.paypal.sdk',name: 'merchantsdk', version: '2.5.106'],
                
                [group: 'com.googlecode.flyway', name: 'flyway-core', version: '2.1.1'],
                
                [group: 'me.legrange',name: 'mikrotik', version: '2.0.2'],
                [group: 'com.github.spullara.mustache.java', name: 'compiler', version: '0.8.12'],
                [group: 'com.itextpdf', name: 'itextpdf', version: '5.5.6'],
                [group: 'net.authorize', name: 'anet-java-sdk', version: '1.8.6'],
                [group: 'commons-net', name: 'commons-net', version: '3.4'],
                [group: 'com.jcraft', name: 'jsch', version: '0.1.42'],
                [group: 'org.bouncycastle', name: 'bcpg-jdk15', version: '1.45'],
                [group: 'com.worldpay', name: 'worldpay-lib-java', version: '0.1.13'],
                [group: 'com.worldpay.api.client', name: 'worldpay-client-core', version: '0.0.1'] 
                      
                             
 	        )

 	 testCompile 'junit:junit:4.11',
 	             'junit:junit-dep:4.11',
                 'org.mockito:mockito-all:1.9.5',
                 'com.jayway.restassured:rest-assured:2.3.3'

}

/* Enable Oauth2 authentication based on environment, default to HTTP basic auth */
if (project.hasProperty('security') && project.getProperty('security') == 'oauth') {
	copy {
	    from './properties/oauth/'
	    into 'src/main/resources/'
	    include '*.properties'
	}
}  else {
	copy {
	    from './properties/basicauth/'
	    into 'src/main/resources/'
	    include '*.properties'
	}
}

task dist(type:Zip){
	baseName= 'obsplatform'
	version = qualifyVersionIfNecessary(releaseVersion)
    from('src/main/pentahoReports/') {
        fileMode = 0755
        include '*'
        into('pentahoReports')
    }
    from('../api-docs/') {
        fileMode = 0755
        include '*'
        into('api-docs')
    }
  
    from war.outputs.files
     into(baseName + '-' + version)
}

task deployPentahoReports() {
	def pentahoReportDir = System.properties['user.home'] + System.properties['file.separator'] + '.obs' + System.properties['file.separator'] + 'pentahoReports'
	copy {
        from "src/main/pentahoReports"
        into pentahoReportDir
    }

    doLast {
        println ':deployPentahoReports - moving pentaho reports under: ' + pentahoReportDir
    }
}

war {
    it.dependsOn deployPentahoReports
    from ('../obs-db/migrations/core_db') {
    	into "WEB-INF/classes/sql"
    }
    rootSpec.exclude("**/bcprov-jdk14-1.38.jar")
    rootSpec.exclude("**/bcprov-jdk14-138.jar")
}

license {
    header rootProject.file('../LICENSE.md')
    excludes(["**/*.html", "**/*.mustache", "**/*.sql", "**/package-info.java", "**/keystore.jks"])
    strictCheck true
}

tomcatRun {
    httpPort  = 8080
    httpsPort = 8443
    stopPort  = 8081
    stopKey   = 'stopKey'
    enableSSL = true
    configFile = file('src/test/resources/META-INF/context.xml')
}

tomcatRunWar {
    httpPort   = 8080
    httpsPort  = 8443
    stopPort   = 8081
    stopKey    = 'stopKey'
    enableSSL  = true
    keystoreFile = file('../keystore.jks')
    keystorePass = 'openmf'
    configFile   = file('src/test/resources/META-INF/context.xml')
}

/* http://stackoverflow.com/questions/19653311/jpa-repository-works-in-idea-and-production-but-not-in-gradle */
sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDir
sourceSets.test.output.resourcesDir = sourceSets.test.output.classesDir


sourceSets {
 integrationTest {
    	compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type:Test){
    description = "Run integration tests (located in src/integrationTest/java). Starts tomcat in daemon mode before executing the tests."
    it.dependsOn war
    doFirst {
        tomcatRunWar.daemon = true
        tomcatRunWar.execute()
    }

    testClassesDir = project.sourceSets.integrationTest.output.classesDir
    classpath = project.sourceSets.integrationTest.runtimeClasspath
}

import groovy.sql.Sql

repositories {
    mavenCentral()
}
configurations {
    driver
}
dependencies {
    driver 'mysql:mysql-connector-java:5.1.16'
}

URLClassLoader loader = GroovyObject.class.classLoader
configurations.driver.each {File file ->
    loader.addURL(file.toURL())
}

task createDB<<{
    description= "Creates the Database. Needs database name to be passed (like: -PdbName=someDBname)"
    sql = Sql.newInstance( 'jdbc:mysql://localhost:3306/', mysqlUser, mysqlPassword, 'com.mysql.jdbc.Driver' )
    sql.execute( 'create database '+"`$dbName`" )
}

task dropDB<<{
    description= "Drops the specified database. The database name has to be passed (like: -PdbName=someDBname)"
    sql = Sql.newInstance( 'jdbc:mysql://localhost:3306/', mysqlUser, mysqlPassword, 'com.mysql.jdbc.Driver' )
    sql.execute( 'DROP DATABASE '+"`$dbName`")
}
task setBlankPassword<<{
    sql = Sql.newInstance( 'jdbc:mysql://localhost:3306/', mysqlUser, mysqlPassword, 'com.mysql.jdbc.Driver' )
    sql.execute('USE `obsplatform-tenants`')
    sql.execute('UPDATE obsplatform-tenants.tenants SET schema_server = \'localhost\', schema_server_port = \'3306\', schema_username = \'root\', schema_password = \'mysql\' WHERE id=1;')
}


apply plugin: 'flyway'
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.flywaydb:flyway-gradle-plugin:3.0" 
        classpath 'mysql:mysql-connector-java:5.1.22'
    }
}

flyway {
    driver = 'com.mysql.jdbc.Driver'
    url = "jdbc:mysql://localhost:3306/obstenant-default"
    user = mysqlUser
    password = mysqlPassword
    
    def filePath = "filesystem:$projectDir" + System.properties['file.separator'] + '..' + System.properties['file.separator'] + 'obs-db' + System.properties['file.separator'] + 'migrations'
    locations = [filePath]
   
}

task migrateTenantDB<<{

    description="Migrates a Tenant DB. Optionally can pass dbName. Defaults to 'obstenant-default' (Example: -PdbName=someTenantDBname)"

	def filePath = "filesystem:$projectDir" + System.properties['file.separator'] + '..' + System.properties['file.separator'] + 'obs-db' + System.properties['file.separator'] + 'migrations/core_db'
	def tenantDbName = 'obstenant-default';

    if (rootProject.hasProperty("dbName")) {
		tenantDbName = rootProject.getProperty("dbName")
	}
	
    flyway.url= "jdbc:mysql://localhost:3306/$tenantDbName"
    flyway.locations= [filePath]
    flywayMigrate.execute()
   
}

task showTenantDBInfo<<{

    description="Shows the migration info for a Tenant DB. Optionally can pass dbName. Defaults to 'obstenant-default' (Example: -PdbName=someTenantDBname)"
    
    def filePath = "filesystem:$projectDir" + System.properties['file.separator'] + '..' + System.properties['file.separator'] + 'obs-db' + System.properties['file.separator'] + 'migrations/core_db'
    def tenantDbName = 'obstenant-default';

    if (rootProject.hasProperty("dbName")) {
		tenantDbName = rootProject.getProperty("dbName")
	}
	
    flyway.url= "jdbc:mysql://localhost:3306/$tenantDbName"
    flyway.locations= [filePath]
    flywayInfo.execute()
    
}

task migrateTenantListDB<<{

    description="Migrates a Tenant List DB. Optionally can pass dbName. Defaults to 'obsplatform-tenants' (Example: -PdbName=someDBname)"
	
	def filePath = "filesystem:$projectDir" + System.properties['file.separator'] + '..' + System.properties['file.separator'] + 'obs-db' + System.properties['file.separator'] + 'migrations/list_db'
 	def tenantsDbName = 'obsplatform-tenants';
 	
    if (rootProject.hasProperty("dbName")) {
		tenantsDbName = rootProject.getProperty("dbName")
	}
	
    flyway.url= "jdbc:mysql://localhost:3306/$tenantsDbName"
    flyway.locations= [filePath]
    flywayMigrate.execute()
  
}

task showTenantListDBInfo<<{

    description="Shows the migration info for a List DB. Optionally can pass dbName. Defaults to 'obsplatform-tenants' (Example: -PdbName=someDBname)"
    
    def filePath = "filesystem:$projectDir" + System.properties['file.separator'] + '..' + System.properties['file.separator'] + 'obs-db' + System.properties['file.separator'] + 'migrations/list_db'
    def tenantsDbName = 'obsplatform-tenants';
    
    if (rootProject.hasProperty("dbName")) {
		tenantsDbName = rootProject.getProperty("dbName")
	}
    
    flyway.url= "jdbc:mysql://localhost:3306/$tenantsDbName"
    flyway.locations= [filePath]
    flywayInfo.execute()
   
}

task repairTenantDB<<{
    
    description="repair migrate"
    
	def filePath = "filesystem:$projectDir" + '/src/main/resources/sql/migrations/list_db'
    def tenantsDbName = 'obsplatform-tenants';
    
    if (rootProject.hasProperty("dbName")) {
        tenantsDbName = rootProject.getProperty("dbName")
    }
    
    flyway.url= "jdbc:mysql://localhost:3306/$tenantsDbName"
    flyway.locations= [filePath]
    flywayRepair.execute()
}
/*
* Support publication of artifacts versioned by topic branch.
* CI builds supply `-P BRANCH_NAME=<TOPIC>` to gradle at build time.
* If <TOPIC> starts with 'OBS-', change version
* from BUILD-SNAPSHOT => <TOPIC>-SNAPSHOT
* e.g. 1.1.0.BUILD-SNAPSHOT => 1.0.0.OBS-1234-SNAPSHOT
*/
def qualifyVersionIfNecessary(version) {

	if (rootProject.hasProperty("BRANCH_NAME")) {
		def qualifier = rootProject.getProperty("BRANCH_NAME")
		if (qualifier.startsWith("OBS-")) {
			return version.replace('BUILD', qualifier)
		}
	}
	return version
}
